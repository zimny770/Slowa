#include "BullCowCartridge.h"
#include "HiddenWordList.h"

void UBullCowCartridge::BeginPlay()
{
    Super::BeginPlay();

    Isograms = GetValidWords(Words);
    SetupGame();

}

void UBullCowCartridge::OnInput(const FString& PlayerInput)
{

    if(bGameOver)
    {
        ClearScreen();
        SetupGame();
    }
    else
    {
        ProcessGuess(PlayerInput);
    }             
   
}

void UBullCowCartridge::SetupGame()
{
    PrintLine(TEXT("!!Witaj na farmie gubiacych krowek!!\n\nSprobuj odgadnac wyraz"));

    HiddenWord = Isograms[FMath::RandRange(0, Isograms.Num() -1)];
    Lives = HiddenWord.Len();
    bGameOver = false;

    PrintLine(TEXT("\nWyraz posiada %i liter\nTwoja liczba zyc: %i"), HiddenWord.Len(), Lives);
    PrintLine(TEXT("\nWcisnij ENTER aby kontynuowac..."));
    PrintLine(TEXT("Wyraz ktorego szukasz to: %s"), *HiddenWord);
  
}

void UBullCowCartridge::EndGame()
{
    bGameOver = true;

    PrintLine(TEXT("\nWcisnij ENTER aby zagrac ponownie"));

}

void UBullCowCartridge::ProcessGuess(const FString& Guess)
{
    if(Guess == HiddenWord)
    {
        PrintLine(TEXT("\nWygrales!!"));
        EndGame();
        return;
    }

    
    if(Guess.Len() != HiddenWord.Len())
    {
        PrintLine(TEXT("\n!!!!Niestety to nie ten wyraz!!!!\nWyraz ktorego szukasz ma %i litery"), HiddenWord.Len());
        
        return;
    } 
    
    
    if(!IsIsogram(Guess))
    {
        PrintLine(TEXT("\nWyraz ktorego szukasz nie posiada \npowtarzajacej sie litery"));
        return;
    }

    PrintLine(TEXT("\nTracisz zycie"));
    --Lives;
    PrintLine(TEXT("Aktualnie posiadasz: %i"), Lives);

    if(Lives <= 0)
    {
        ClearScreen();
    
        PrintLine(TEXT("\nStraciles wszystkie zycia"));
        PrintLine(TEXT("\nUkrytym slowem bylo: %s"), *HiddenWord);

        EndGame();

        return;
    }
    

    FBullCowCount Score = GetBullCows(Guess);

    PrintLine(TEXT("\nLitery we wlasciwym miejscu:%i\nLitery pozostale nalezace do wyrazu ale w zlym miejscu:%i"), Score.Bulls, Score.Cows);
    
}

bool UBullCowCartridge::IsIsogram(const FString& Word) const
{
   int32 Index = 0;


    for (int32 Index = 0; Index < Word.Len(); Index++)
    {
        for (int32 Comparison = Index + 1; Comparison < Word.Len(); Comparison++)
        {
            if (Word[Index] == Word[Comparison])
            {
                return false;
            }
        }   
    }

    return true;


}

TArray<FString> UBullCowCartridge::GetValidWords(const TArray<FString>& WordList) const
{
    TArray<FString> ValidWords;

    for(FString Word : WordList)
    {
        if(Word.Len() >=4 && Word.Len() <= 8)
        {
            if(IsIsogram(Word))
            {
                ValidWords.Emplace(Word);                
            }

        }
    }
    return ValidWords;
}

FBullCowCount UBullCowCartridge::GetBullCows(const FString& Guess) const
{
    FBullCowCount Count;

    for(int32 GuessIndex = 0; GuessIndex < Guess.Len(); GuessIndex++)
    {
        if(Guess[GuessIndex] == HiddenWord[GuessIndex])
        {
            Count.Bulls++;
            continue;
        }

        for(int32 HiddenIndex = 0; HiddenIndex < HiddenWord.Len(); HiddenIndex++)
        {
            if(Guess[GuessIndex] == HiddenWord[HiddenIndex])
            {
                Count.Cows++;
                break;
            }
        }
    }
    return Count;
};
